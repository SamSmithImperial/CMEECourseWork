getwd()
setwd
setwd("/home/samsmith/Documents/CMEECourseWork/week6/sandbox")
rm(list = ls())
graphics.off()
S_data <- seq(1,50,5)
S_data
V_data <- ((12.5*S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456)
V_data <- V_data + rnorm(10,0,1)
plot(S_data, V_data)
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
summary(MM_model)
anova(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model3)
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
install.packages("minpack.lm")
rm(list = ls())
graphics.off()
S_data <- seq(1,50,5)
S_data
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
confint(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model)
coef(MM_model2)
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
rm(list = ls())
S_data <- seq(1,50,5)
S_data <- seq(1,50,5)
V_data <- ((12.5 * S_data)/(7.1 + S_data))
plot(S_data, V_data)
set.seed(1456) # To get the same random fluctuations in the "data" every time
V_data <- V_data + rnorm(10,0,1) # Add 10 random fluctuations  with standard deviation of 1 to emulate error
plot(S_data, V_data)
MM_model <- nls(V_data ~ V_max * S_data / (K_M + S_data))
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # now overlay the fitted model
coef(MM_model) # check the coefficients
Substrate2Plot <- seq(min(S_data), max(S_data),len=200) # generate some new x-axis values just for plotting
Predict2Plot <- coef(MM_model)["V_max"] * Substrate2Plot / (coef(MM_model)["K_M"] + Substrate2Plot) # calculate the predicted values by plugging the fitted coefficients into the model equation
plot(S_data,V_data, xlab = "Substrate Concentration", ylab = "Reaction Rate")  # first plot the data
lines(Substrate2Plot, Predict2Plot, lty=1,col="blue",lwd=2) # now overlay the fitted model
summary(MM_model)
confint(MM_model)
MM_model2 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model)
coef(MM_model2)
MM_model3 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
coef(MM_model)
coef(MM_model2)
coef(MM_model3)
plot(S_data,V_data)  # first plot the data
lines(S_data,predict(MM_model),lty=1,col="blue",lwd=2) # overlay the original model fit
lines(S_data,predict(MM_model3),lty=1,col="red",lwd=2) # overlay the latest model fit
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
MM_model4 <- nls(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12.96, K_M = 10.61))
coef(MM_model)
coef(MM_model4)
require("minpack.lm")
MM_model5 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 12, K_M = 7))
coef(MM_model2)
coef(MM_model5)
MM_model6 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = .01, K_M = 20))
MM_model7 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0, K_M = 0.1))
MM_model8 <- nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -0.1, K_M = 100))
coef(MM_model6)
coef(MM_model7)
coef(MM_model8)
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = -10, K_M = -100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start = list(V_max = 0.1, K_M = 0.1), lower=c(0.4,0.4), upper=c(100,100))
nlsLM(V_data ~ V_max * S_data / (K_M + S_data), start =  list(V_max = 0.5, K_M = 0.5), lower=c(0.4,0.4), upper=c(20,20))
hist(residuals(MM_model6))
setwd("/home/samsmith/Documents/CMEECourseWork/week3/")
help("commandArgs")
TreeHeight <- function(degrees, distance) {
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
library(tools)
filename_without_path_and_ext <- file_path_sans_ext("../data/trees.csv")
filename_without_path_and_ext
basename(filename_without_path_and_ext)
load("/home/samsmith/Downloads/Z8_Oscillatoria agardhii StrainCYA 128_15_1.rda")
View(data)
setwd("/home/samsmith/Documents/CMEECourseWork/Miniproject/code/")
Data <- read.csv2("../data/WrangledData.csv")
library(ggplot2)
Data['ID' == 1]
Data['ID'== 1]
Data['ID']
Data[1]
Data[1[1]]
head(Data)
head(Data)
head(Data[ID])
head(Data['ID'])
Data$ID
print(Data$ID)
Data <- read.csv2("../data/WrangledData.csv")
print(Data$ID)
View(Data)
Data <- read.csv("../data/WrangledData.csv")
print(Data$ID)
length(Data$ID)
unique(Data$ID)
Data <- read.csv("../data/WrangledData.csv")
library(ggplot2)
print(Data$ID)
unique(Data$ID)
plot1 <- ggplot(data = Data['ID'==1], aes()
View(Data)
View(Data)
Data <- read.csv("../data/WrangledData.csv")
View(Data)
Data <- read.csv("../data/WrangledData.csv")
View(Data)
Data <- read.csv("../data/WrangledData.csv")
View(Data)
Data <- read.csv("../data/WrangledData.csv")
View(Data)
Data$ID == 1
plot1 <- ggplot(data = Data, aes(x=Data$Time[Data$ID==1], y = Data$PopBio))
View(plot1)
plot1 <- ggplot(data = Data[Data$ID==1], aes(x=Data$Time, y = Data$PopBio))
plot1 <- ggplot(data = Data[Data$ID==1], aes(x=Time, y = PopBio))
subset <- Data$ID == 1
subset <- Data[Data$ID==1]
subset <- Data[Data$ID=1]
subset <- Data[Data$ID == '1']
head(Data)
subset(Data, ID==1)
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))
plot1
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()
plot1
model1 <- lm(Data$PopBio ~ poly(Data$Time, 3))
View(model1)
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()+geom_line()
plot1
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()+geom_line(predict(model1))
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()+geom_line(model1)
model1 <- lm(data = subset(Data, ID==1), Data$PopBio ~ poly(Data$Time, 3))
plot(Time ~ PopBio, data = subset(Data, ID ==1))
plot(PopBio ~ Time, data = subset(Data, ID ==1))
abline(model1)
model1 <- lm(data = subset(Data, ID==1), Data$PopBio ~ poly(Data$Time, 3))
abline(model1)
model1 <- lm(data = subset(Data, ID==1), PopBio ~ poly(Time, 3))
plot(PopBio ~ Time, data = subset(Data, ID ==1))
abline(model1)
lines(Data$Time, predict(model1))
subsetdata <- subset(Data, ID==1)
View(subsetdata)
model1 <- lm(data = subsetdata, PopBio ~ poly(Time, 3))
View(model1)
model1 <- lm(data = subsetdata, PopBio ~ poly(Time, 3))
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()
plot1
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()+geom_smooth(method = "lm", formula = PopBio ~ poly(Temp,3))
plot1
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()+geom_smooth(method = "lm", formula = subsetdata$PopBio ~ poly(subsetdata$Temp,3))
plot1
View(subsetdata)
plot1 <- ggplot(data = subset(Data, ID==1), aes(x=Time, y = PopBio))+geom_point()+geom_smooth(method = "lm", formula = subsetdata$PopBio ~ subsetdata$Temp)
plot1
Data <- read.csv("../data/WrangledData.csv")
subsetteddata <- subset(Data, 'ID' == 1)
View(subsetteddata)
subsetteddata <- subset(Data, ID == 1)
View(subsetteddata)
plot(Time, PopBio, subsetteddata)
plot(subsetteddata$Time, subsetteddata$PopBio)
abline()
model1 <- lm(PopBio ~ Time, data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
View(subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(predictedvalues)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
model1 <- lm(PopBio ~ poly(Time,2), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
model1 <- lm(PopBio ~ poly(Time,10), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
model1 <- lm(PopBio ~ poly(Time,29), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
model1 <- lm(PopBio ~ poly(Time,28), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
model1 <- lm(PopBio ~ poly(Time,27), data = subsetteddata)
model1 <- lm(PopBio ~ poly(Time,15), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
model1 <- lm(PopBio ~ poly(Time,20), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_line(aes(Time,predictedvalues))
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues))
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
View(model1)
View(model1)
model1 <- lm(PopBio ~ poly(Time,4), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
model1 <- lm(PopBio ~ poly(Time,2), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 1)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 2)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 3)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 4)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 5)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 6)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 7)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
subsetteddata <- subset(Data, ID == 8)
model1 <- lm(PopBio ~ poly(Time,3), data = subsetteddata)
subsetteddata$predictedvalues <- predict(model1, subsetteddata)
ggplot(data = subsetteddata, aes(Time, PopBio))+geom_point()+geom_smooth(aes(Time,predictedvalues), se =FALSE)
