library(tseries)
library("tseries")
install.packages("tseries")
library("tseries")
library(tseries)
load("../data/KeyWestAnnualMeanTemperature.RData")
getwd
getwd()
setwd("/home/samsmith/Documents/CMEECourseWork/week3/code/")
getwd()
load("../data/KeyWestAnnualMeanTemperature.RData")
ats <- transform(ats, dy=c(NA, diff(ats$Temp)))
acf(ats$Temp)
View(ats)
rm(list=ls())
load("../data/KeyWestAnnualMeanTemperature.RData")
set.seed(1)
n <- length(ats$Year)
Perm <- 100000
variable <- ats$Temp
# Generate permutations
PermSamples <- replicate(Perm, sample(variable, size = n, replace = FALSE))
PermSamples <- cbind(ats$Year, PermSamples)
# Calculate correlations
CorrelationCoefficients <- cor(PermSamples[, 1], PermSamples[, 2:(Perm + 1)])
print(range(CorrelationCoefficients))
# Plot the histogram
hist(CorrelationCoefficients, xlim = c(-0.4, 0.6))
abline(v = 0.53, col = "red", lwd = 3)
text(x = 0.5, y = 15000, '0.53')
acf(ats$Temp)
AutoCorData <- (ats$Temp[1:99], ats$Temp[2:100])
Temp1 <- ats$Temp[1:99]
Temp2 <- ats$Temp[2:100]
cor.test(Temp1, Temp2)
cor(Temp1, Temp2)
View(CorrelationCoefficients)
library(readr)
df <- read_csv("~/Personal/StravaWebApp/df.csv")
View(df)
df <- read_csv("~/Personal/StravaWebApp/df.csv")
library(readr)
df <- read_csv("~/Personal/StravaWebApp/df.csv")
head(df)
df1 <- subset(df$total_elevation_gain, df$sport_type['Run'])
df1 <- subset(df$total_elevation_gain, df$sport_type)
# Assuming 'df' is your existing dataset
# 'cols_to_select' is a vector containing the column names you want to keep
cols_to_select <- c("total_elevation_gain", "sport_type")
# Create a new dataset with selected columns
df1 <- df[cols_to_select]
View(df1)
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != 'swim', ]
View(df1)
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != 'Swim', ]
View(df1)
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != c('Swim', 'Ride','Walk', 'Hike'), ]
View(df1)
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != 'Swim', 'Ride','Walk', 'Hike', ]
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != 'Swim' ]
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != 'Swim', ]
# Assuming 'df1' is your dataset with selected columns
# Remove rows with sport_type equal to 'swim'
df1 <- df1[df1$sport_type != 'Swim', ]
df1 <- df1[df1$sport_type != 'Hike', ]
df1 <- df1[df1$sport_type != 'Walk', ]
df1 <- df1[df1$sport_type != 'Ride', ]
View(df1)
df1 <- df1[df1$sport_type != 'VirtualRun', ]
sum(df1$total_elevation_gain)
library(readr)
df <- read_csv("~/Personal/StravaWebApp/Alldata.csv")
df1 <- subset(df$total_elevation_gain, df$sport_type)
library(readr)
df <- read_csv("~/Personal/StravaWebApp/Alldata.csv")
cols_to_select <- c("total_elevation_gain", "sport_type")
df1 <- df[cols_to_select]
df1 <- df1[df1$sport_type != 'Swim', ]
df1 <- df1[df1$sport_type != 'Hike', ]
df1 <- df1[df1$sport_type != 'Walk', ]
df1 <- df1[df1$sport_type != 'Ride', ]
df1 <- df1[df1$sport_type != 'VirtualRun', ]
sum(df1$total_elevation_gain)
TotalElevation <- sum(df1$total_elevation_gain)
MountEverest <- 10000
HowLongLeft <- MountEverest-TotalElevation
print(HowLongLeft)
range(df1$total_elevation_gain)
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigma )
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigm )
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
RandomNumbers <- vector(numyears, 0, sigma)
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
RandomNumbers <- vector(numyears, 0, sigma)
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
RandomNumbers
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigma)
RandomNumbers
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
View(RandomNumbers)
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(numyears, 0, sigma)
View(RandomNumbers)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
RandomNumbers <- vector(rnorm(numyears, 0, sigma))
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(rnorm(numyears, 0, sigma))
View(RandomNumbers)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
RandomNumbers <- vector(rnorm(numyears, 0, sigma))
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- vector(rnorm(numyears, 0, sigma))
View(RandomNumbers)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
RandomNumbers <- rnorm(numyears, 0, sigma)
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- rnorm(numyears, 0, sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100){
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- rnorm(numyears, 0, sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100){
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- rnorm(numyears, 0, sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- rnorm(numyears,0,sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr] # add one fluctuation from normal distribution
}
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
RandomNumbers <- rnorm(numyears,0,sigma)
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + RandomNumbers[yr]) # add one fluctuation from normal distribution
}
}
return(N)
}
rm(list = ls())
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2, numyears = 100) {
N <- matrix(NA, numyears, length(p0))  # initialize empty matrix
RandomNumbers <- rnorm(numyears, 0, sigma)
N[1, ] <- p0
for (yr in 2:numyears) {  # loop through the years
N[yr, ] <- N[yr - 1, ] * exp(r * (1 - N[yr - 1, ] / K) + RandomNumbers[yr])  # add one fluctuation from normal distribution
}
return(N)
}
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list = ls())
stochrickvect <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2, numyears = 100) {
N <- matrix(NA, numyears, length(p0))  # initialize empty matrix
RandomNumbers <- rnorm(numyears, 0, sigma)
N[1, ] <- p0
for (yr in 2:numyears) {  # loop through the years
N[yr, ] <- N[yr - 1, ] * exp(r * (1 - N[yr - 1, ] / K) + RandomNumbers[yr])  # add one fluctuation from normal distribution
}
return(N)
}
# Original
stochrick <- function(p0 = runif(1000, .5, 1.5), r = 1.2, K = 1, sigma = 0.2,numyears = 100)
{
N <- matrix(NA, numyears, length(p0))  #initialize empty matrix
N[1, ] <- p0
for (pop in 1:length(p0)) { #loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr, pop] <- N[yr-1, pop] * exp(r * (1 - N[yr - 1, pop] / K) + rnorm(1, 0, sigma)) # add one fluctuation from normal distribution
}
}
return(N)
}
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
print(system.time(res3<-stochrick()))
View(res2)
View(res3)
mean(res2$V1)
res2
mean(res2$V1)
sum(res2$V1)
head res2
head(res2)
res2$v1
class(res2)
as.data.frame(res2)
sum(as.data.frame(res2$V1))
res21 <- as.data.frame(res2)
mean(res21$V1)
res31 <- as.data.frame(res3)
mean(res31$V1)
mean(res31$V2)
mean(res21$V2)
mean(res31$V3)
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
print(system.time(res3<-stochrick()))
