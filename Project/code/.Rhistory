setwd("Documents/CMEECourseWork/Project/code/")
data <- read.csv("../data/sequences.csv")
# Load the Biostrings package
library(Biostrings)
seq1 <- data[1, 2]  # Assuming df is your DataFrame containing sequences
seq2 <- df[2, 2]
seq2 <- data[2, 2]
alignment <- pairwiseAlignment(pattern = seq1, subject = seq2, substitutionMatrix = matrix(c(2, -1, -0.5, -0.1), nrow = 2))
# Perform Smith-Waterman local alignment
substitution_matrix <- matrix(c(2, -1, -0.5, -0.1), nrow = 2, byrow = TRUE)
# Perform Smith-Waterman local alignment
alignment <- pairwiseAlignment(pattern = seq1, subject = seq2, substitutionMatrix = substitution_matrix)
library(readr)
sequences <- read_csv("~/Documents/CMEECourseWork/Project/data/sequences.csv")
View(sequences)
library(readr)
sequences <- read_csv("~/Documents/CMEECourseWork/Project/data/sequences.csv")
View(sequences)
data <- read.csv("../data/sequences.csv")
data <- head(data)
View(data)
getwd()
write_csv(data, "previewseq.csv")
library(Biostrings)
data <- read.csv("../data/sequences.csv")
colnames(df)[which(colnames(df) == 'FileName')] <- 'Mito_ID'
colnames(data)[which(colnames(data) == 'FileName')] <- 'Mito_ID'
colnames(data)[which(colnames(data) == 'FileName')] <- 'Mito_ID'
head(data)
data
df$Mito_ID <- gsub("\\.gb$", "", df$Mito_ID)
df$Mito_ID <- gsub(".gb", "", df$Mito_ID)
data$Mito_ID <- gsub("\\.gb$", "", data$Mito_ID)
data
seq1 <- DNAString("ACGTAGC")
seq2 <- DNAString("ACGGAGC")
# Compute pairwise alignment
alignment <- pairwiseAlignment(seq1, seq2)
# Compute sequence identity
matches <- msaMatches(alignment)
alignment
alignment_matrix <- as(alignment, "character")
alignment_matrix
seq1 <- DNAString("ACGTAGC")
seq2 <- DNAString("ACGGGAGC")
# Compute pairwise alignment
alignment <- pairwiseAlignment(seq1, seq2)
alignment
seq2 <- DNAString("ACGGAGC")
# Compute pairwise alignment
alignment <- pairwiseAlignment(seq1, seq2)
alignment
alignment$pattern
class(alignment)
alignment[PairwiseAlignmentsSingleSubject()]
PairwiseAlignmentsSingleSubject(alignment)
PairwiseAlignmentsSingleSubject(seq1, seq2)
alignment <- PairwiseAlignmentsSingleSubject(seq1, seq2)
alignment[[1]]
alignment[1]
alignment[2]
alignment[1][1]
alignment[1][2]
alignment[1]$pattern
class(alignment)
subject(alignment)
query(alignment)
pattern(alignment)
seq1 <- DNAString("ACGGTAGC")
seq2 <- DNAString("ACGGAGC")
alignment <- PairwiseAlignments(seq1, seq2)
alignment <- PairwiseAlignment(seq1, seq2)
alignment <- pairwiseAlignment(seq1, seq2)
subject(alignment)
aligned_seq1 <- pattern(alignment)
Align_Matrix <- rbind(aligned_seq2, aligned_seq1)
aligned_seq2 <- subject(alignment)
aligned_seq1 <- pattern(alignment)
Align_Matrix <- rbind(aligned_seq2, aligned_seq1)
as.vector(aligned_seq1)
aligned_seq1[1]
aligned_seq1[[1]]
aligned_seq1[1][1]
class(aligned_seq1)
aligned_seq1[1]
as.character(aligned_seq1[1])
as.character(aligned_seq2[1])
as.vector(as.character(aligned_seq2[1]))
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1]))
Align_Matrix <- rbind(vector_aligned_s1,vector_aligned_s2)
Align_Matrix
Align_Matrix
type(Align_Matrix)
class(Align_Matrix)
Align_Matrix[1]
Align_Matrix[,1]
Align_Matrix[1,]
Align_Matrix[1]
Align_Matrix
Align_Matrix[1]
vector_aligned_s2 <- alist(as.character(aligned_seq2[1]))
vector_aligned_s2 <- list(as.character(aligned_seq2[1]))
vector_aligned_s2
vector_aligned_s2 <- list(aligned_seq2[1])
vector_aligned_s2
vector_aligned_s2 <- as.vector(list(aligned_seq2[1]))
vector_aligned_s2
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1]))
vector_aligned_s2
class(vector_aligned_s2)
vector_aligned_s2 <- list(as.vector(as.character(aligned_seq2[1])))
vector_aligned_s2
vector_aligned_s2 <- strsplit(as.character(aligned_seq2[1]))
vector_aligned_s2 <- as.character(aligned_seq2[1]))
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])))
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1]))
vector_aligned_s2[1]
vector_aligned_s2[1][1]
vector_aligned_s2 <- unlist(strsplit(aligned_seq2, ""))
class(vector_aligned_s2)
individual_letters <- strsplit(vector_aligned_s2, "")[[1]]
array_of_letters <- unlist(individual_letters)
array_of_letters
seq1 <- DNAString("ACGGTAGC")
seq2 <- DNAString("ACGGAGC")
alignment <- pairwiseAlignment(seq1, seq2)
aligned_seq2 <- subject(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2)
aligned_seq1 <- pattern(alignment)
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(vector_aligned_s1,vector_aligned_s2)
Align_Matrix
Align_Matrix <- rbind(array_seq1,array_seq2)
Align_Matrix
data
view(data)
attach(data)
Align_Matrix
seq1 <- DNAString("ACGGTAGC")
seq2 <- DNAString("ACGGATTTGC")
alignment <- pairwiseAlignment(seq1, seq2) # Perform Alignment
aligned_seq2 <- subject(alignment) # Extract Alignments including gap characters
aligned_seq1 <- pattern(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])) # Vectorise the Sequences
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]] # Split String into Individual Characters
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2) # Turn Sequences into Arrays to make Matrix
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(array_seq1,array_seq2) # Create Pairwise Matrix
Align_Matrix
seq1 <- DNAString("ACGGTAGC")
seq2 <- DNAString("ACCGGATTTGC")
alignment <- pairwiseAlignment(seq1, seq2) # Perform Alignment
aligned_seq2 <- subject(alignment) # Extract Alignments including gap characters
aligned_seq1 <- pattern(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])) # Vectorise the Sequences
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]] # Split String into Individual Characters
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2) # Turn Sequences into Arrays to make Matrix
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(array_seq1,array_seq2) # Create Pairwise Matrix
Align_Matrix
seq1 <- DNAString("ACGGTAGCTTTTCGTCG")
seq2 <- DNAString("ACCGGATTTGC")
alignment <- pairwiseAlignment(seq1, seq2) # Perform Alignment
aligned_seq2 <- subject(alignment) # Extract Alignments including gap characters
aligned_seq1 <- pattern(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])) # Vectorise the Sequences
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]] # Split String into Individual Characters
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2) # Turn Sequences into Arrays to make Matrix
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(array_seq1,array_seq2) # Create Pairwise Matrix
Align_Matrix
seq1
seq1 <- DNAString("ACGGTAGCTTTTCGTCG")
seq2 <- DNAString("ACCGGATTTGC")
seq1
alignment <- pairwiseAlignment(seq1, seq2) # Perform Alignment
aligned_seq2 <- subject(alignment) # Extract Alignments including gap characters
aligned_seq1 <- pattern(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])) # Vectorise the Sequences
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]] # Split String into Individual Characters
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2) # Turn Sequences into Arrays to make Matrix
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(array_seq1,array_seq2) # Create Pairwise Matrix
Align_Matrix
seq2
Align_Matrix
ncol(Align_Matrix)
table(data)
DNAString(data$COX1[1])
DNAString(data$COX1[2])
DNAString(data$COX1[3])
DNAString(data$COX1[4])
DNAString(data$COX1[5])
DNAString(data$COX1[6])
DNAString(data$COX1[7])
DNAString(data$COX1[8])
DNAString(data$COX1[9])
DNAString(data$COX1[10])
DNAString(data$COX1[11])
DNAString(data$COX1[12])
DNAString(data$COX1[13])
DNAString(data$COX1[14])
DNAString(data$COX1[15])
DNAString(data$COX1[16])
DNAString(data$COX1[17])
DNAString(data$COX1[0])
DNAString(data$COX1[1])
data1 <- head(data)
data1
head(data1)
data1
attach(data1)
data1
view(data1)
class(data1)
View(data1)
length(data1)
nrow(data1)
no_obs <- nrow(data1)
PairwiseMatrix <- data.frame(matrix(nrow = nrow(data1), ncol = nrow(data1)))
PairwiseMatrix
colnames(PairwiseMatrix) <- row.names(data1)
PairwiseMatrix
colnames(PairwiseMatrix) <- rownames(data1)
PairwiseMatrix
colnames(PairwiseMatrix) <- `rownames<-`(data1)
colnames(PairwiseMatrix) <- rownames(data1)
rownames(data1)
data1
colnames(PairwiseMatrix) <- data1$Mito_ID
PairwiseMatrix
PairwiseMatrix
rownames(PairwiseMatrix) <- data1$Mito_ID
PairwiseMatrix
PairwiseMatrix
SquareMatrixSize <- nrow(PairwiseMatrix)
SquareDFSize <- nrow(PairwiseMatrix)
Align_Matrix
Align_Matrix
num_matches <- sum(Align_Matrix[1, ] == Align_Matrix[2, ] & Align_Matrix[1, ] != "-")
num_matches
num_matches <- sum(Align_Matrix[1, ] == Align_Matrix[2, ])
num_matches
Score <- num_matches/AlignLength
AlignLength <- ncol(Align_Matrix) # Length of Alignment - used to calculate percentage similarity
num_matches <- sum(Align_Matrix[1, ] == Align_Matrix[2, ] & Align_Matrix[1, ] != "-") #
Score <- num_matches/AlignLength
Score
Pairwise_Score_Function <- function(seq1, seq2) {
alignment <- pairwiseAlignment(seq1, seq2) # Perform Alignment
aligned_seq2 <- subject(alignment) # Extract Alignments including gap characters
aligned_seq1 <- pattern(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])) # Vectorise the Sequences
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]] # Split String into Individual Characters
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2) # Turn Sequences into Arrays to make Matrix
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(array_seq1,array_seq2) # Create Pairwise Matrix
AlignLength <- ncol(Align_Matrix) # Length of Alignment - used to calculate percentage similarity
num_matches <- sum(Align_Matrix[1, ] == Align_Matrix[2, ] & Align_Matrix[1, ] != "-") #
Score <- num_matches/AlignLength
return(Score)
}
rownames(PairwiseMatrix[1,2])
PairwiseMatrix[1,2]
colnames(PairwiseMatrix)[1]
seq1 <- DNAString("ATGCGTGT")
seq2 <- DNAString("ATGCGATGT")
Pairwise_Score_Function <- function(seq1, seq2) {
alignment <- pairwiseAlignment(seq1, seq2) # Perform Alignment
aligned_seq2 <- subject(alignment) # Extract Alignments including gap characters
aligned_seq1 <- pattern(alignment)
vector_aligned_s2 <- as.vector(as.character(aligned_seq2[1])) # Vectorise the Sequences
vector_aligned_s1 <- as.vector(as.character(aligned_seq1[1]))
individual_letters_seq2 <- strsplit(vector_aligned_s2, "")[[1]] # Split String into Individual Characters
individual_letters_seq1 <- strsplit(vector_aligned_s1, "")[[1]]
array_seq2 <- unlist(individual_letters_seq2) # Turn Sequences into Arrays to make Matrix
array_seq1 <- unlist(individual_letters_seq1)
Align_Matrix <- rbind(array_seq1,array_seq2) # Create Pairwise Matrix
AlignLength <- ncol(Align_Matrix) # Length of Alignment - used to calculate percentage similarity
num_matches <- sum(Align_Matrix[1, ] == Align_Matrix[2, ] & Align_Matrix[1, ] != "-") #
Score <- num_matches/AlignLength
return(Score)
}
Pairwise_Score_Function(seq1, seq2)
DNAString(data$COX1[1])
DNAString(data$COX1[data1$Mito_ID ==  "GBDL00466"])
data$COX1[data1$Mito_ID ==  "GBDL00466"]
data1$COX1[data1$Mito_ID =="GBDL00466"]
DNAString(data1$COX1[data1$Mito_ID ==  "GBDL00466"])
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- colnames(PairwiseMatrix)[i]
seq2_ID <- colnames(PairwiseMatrix)[j]
seq1 <- DNAString(data1$COX1[data$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)c
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- colnames(PairwiseMatrix)[i]
seq2_ID <- colnames(PairwiseMatrix)[j]
seq1 <- DNAString(data1$COX1[data$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
PairwiseMatrix
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- colnames(PairwiseMatrix)[i]
seq2_ID <- colnames(PairwiseMatrix)[j]
seq1 <- DNAString(data1$COX1[data1$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data1$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
data1$Mito_ID[1]
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- data1$Mito_ID[i]
seq2_ID <- data1$Mito_ID[j]
seq1 <- DNAString(data1$COX1[data1$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data1$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
PairwiseMatrix
data[1:100]
data[1:100,]
data[1:2,]
data1 <- data[1:30,]
PairwiseMatrix <- data.frame(matrix(nrow = nrow(data1), ncol = nrow(data1)))
SquareDFSize <- nrow(PairwiseMatrix)
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- data1$Mito_ID[i]
seq2_ID <- data1$Mito_ID[j]
seq1 <- DNAString(data1$COX1[data1$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data1$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
data1 <- data[!is.na(data$cox1), ][1:30, ]
PairwiseMatrix <- data.frame(matrix(nrow = nrow(data1), ncol = nrow(data1)))
SquareDFSize <- nrow(PairwiseMatrix)
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- data1$Mito_ID[i]
seq2_ID <- data1$Mito_ID[j]
seq1 <- DNAString(data1$COX1[data1$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data1$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
data1
data1 <- data[!is.na(data$COX1), ][1:30, ]
data1
PairwiseMatrix <- data.frame(matrix(nrow = nrow(data1), ncol = nrow(data1)))
SquareDFSize <- nrow(PairwiseMatrix)
for (i in 1:SquareDFSize) {
for (j in 1:SquareDFSize) {
seq1_ID <- data1$Mito_ID[i]
seq2_ID <- data1$Mito_ID[j]
seq1 <- DNAString(data1$COX1[data1$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data1$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
View(PairwiseMatrix)
View(data1)
colnames(PairwiseMatrix) <- data1$Mito_ID
View(PairwiseMatrix)
rownames(PairwiseMatrix) <- data1$Mito_ID
data1 <- head(data)
PairwiseMatrix <- data.frame(matrix(nrow = nrow(data1), ncol = nrow(data1)))
colnames(PairwiseMatrix) <- data1$Mito_ID
rownames(PairwiseMatrix) <- data1$Mito_ID
SquareDFSize <- nrow(PairwiseMatrix)
for (i in 1:SquareDFSize) {
for (j in i:SquareDFSize) {
seq1_ID <- data1$Mito_ID[i]
seq2_ID <- data1$Mito_ID[j]
seq1 <- DNAString(data1$COX1[data1$Mito_ID == seq1_ID])
seq2 <- DNAString(data1$COX1[data1$Mito_ID == seq2_ID])
Score <- Pairwise_Score_Function(seq1, seq2)
PairwiseMatrix[i,j] <- Score
}
}
PairwiseMatrix
PairwiseMatrix
PairwiseMatrix[lower.tri(PairwiseMatrix)] <- t(PairwiseMatrix)[lower.tri(PairwiseMatrix)]
PairwiseMatrix
PairwiseMatrix
